{
  "hash": "23d275748a081bed5e7bbc3133c59383",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Como construir uma Curva IS no Python?\"\ndate: \"2024-02-28\"\ndate-modified: \"2024-04-18\"\nauthor: \"Luiz Henrique\"\ndescription: \"Construindo um modelo da Curva IS usando o Python\"\ncategories: [Macroeconometria, Macroeconomia, Python, Português]\nimage: \"imgs/curva-is.png\"\naliases: \n  - /posts/macroeconometria/modelos/index.html\n---\n\nO objetivo do exercício será estimar uma versão da Curva IS do Modelo Semiestrutural de Pequeno Porte do BCB descrito nesse [Relatório](https://www.bcb.gov.br/htms/relinf/port/2017/06/ri201706b7p.pdf), conforme descrito abaixo:\n\n\\begin{align}\nh_t = \\beta_0 + \\sum_{i>0} \\beta_{1i} h_{t-1} + \\sum_{j>0} \\beta_{2j} r_{t-j} +\\sum_{k > 0} \\beta_{3k} \\Delta sup_{t-k} + u_t\n\\end{align}\n\nBasicamente, a Curva IS estimada irá descrever a dinâmica do hiato do produto com base em **suas próprias defasagens**, da **taxa de juros real ex-ante** e da **variação do superávit primário**.\n\n## Dados\nO Hiato do produto é aquele construído pelo Banco Central, disponibilizado nos anexos estatísticos do Relatório de Inflação.\n\nO hiato do juros é criado pela diferença entre o juros real ex-ante e o juro neutro, a taxa de juros real obtida pela taxa de juros nominal swap pré-DI de 360 dias deflacionada pela expectativa de inflação relativa ao período de vigência do contrato, o juro de equilíbrio segue uma proxy definida no Relatório de Inflação de dezembro de 2019, dada pela Selic esperada para t+3 deflacionada pela inflação espera para t+3.\n\nA variação do superávit primário utilizada é aquela proveniente do resultado fiscal estrutural construído pela SPE.\n\n## Como estimamos a curva IS?\n\nA Curva IS é estimada com base na equação descrita no início usando 2SLS com matriz de covariância robusta para evitar problemas na inferência dos parâmetros causados por autocorrelação e heterocedasticidade nos resíduos. Há também a adição de duas dummies para levar em consideração a crise de 2008 e a pandemia de Covid.\n\n::: {#c2719102 .cell execution_count=1}\n``` {.python .cell-code}\nfrom plotnine import *\nfrom bcb import sgs # Importar dados do SGS\nfrom bcb import Expectativas # Importar dados de Expectativas\nimport ipeadatapy as ip # importa dados do IPEADATA\nimport pandas as pd # Manipulação de dados\nimport numpy as np # Manipulação e cálculo de dados\nfrom functools import reduce # módulo para juntar dfs\nfrom datetime import datetime # módulo para trabalhar com data\nfrom linearmodels.iv import IV2SLS # Modelo IV2SLS\nimport statsmodels.api as sm\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\n```\n:::\n\n\n## 2.1 Hiato do Produto\n\n::: {#b08d8a3e .cell execution_count=2}\n``` {.python .cell-code}\n# Coleta e tratamento do Hiato do Produto da IFI\nhiato = (\n    pd.read_excel(\n    \"https://www12.senado.leg.br/ifi/dados/arquivos/estimativas-do-hiato-do-produto-ifi/@@download/file/Hiato%20do%20Produto%20IFI.xlsx\",\n    sheet_name = \"Hiato do Produto\",\n    skiprows = 1\n    )\n    .assign(date_quarter = lambda x: pd.PeriodIndex(x['Trim-Ano'], freq = 'Q'),\n            hiato_ifi = lambda x: x.Hiato.astype(float) * 100)\n    .loc[:, ['date_quarter', 'hiato_ifi']]\n  )\n```\n:::\n\n\n::: {#d805720d .cell execution_count=3}\n``` {.python .cell-code}\nhiato\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date_quarter</th>\n      <th>hiato_ifi</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1996Q1</td>\n      <td>-0.86</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1996Q2</td>\n      <td>-0.71</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1996Q3</td>\n      <td>0.73</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1996Q4</td>\n      <td>0.02</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1997Q1</td>\n      <td>0.19</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>107</th>\n      <td>2022Q4</td>\n      <td>0.10</td>\n    </tr>\n    <tr>\n      <th>108</th>\n      <td>2023Q1</td>\n      <td>0.56</td>\n    </tr>\n    <tr>\n      <th>109</th>\n      <td>2023Q2</td>\n      <td>0.96</td>\n    </tr>\n    <tr>\n      <th>110</th>\n      <td>2023Q3</td>\n      <td>0.76</td>\n    </tr>\n    <tr>\n      <th>111</th>\n      <td>2023Q4</td>\n      <td>0.47</td>\n    </tr>\n  </tbody>\n</table>\n<p>112 rows × 2 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {#a3d2d6a4 .cell execution_count=4}\n``` {.python .cell-code}\n# Coleta e tratamento do Hiato do Produto do BC\nhiato_bcb = (\n    pd.read_excel(\n    \"https://www.bcb.gov.br/content/ri/relatorioinflacao/202403/ri202403anp.xlsx\",\n    sheet_name = \"Graf 2.2.4\",\n    skiprows = 8\n    )\n    .assign(date_quarter = lambda x: pd.PeriodIndex(x['Trimestre'], freq = 'Q'),\n            hiato_bcb = lambda x: x.Hiato.astype(float))\n    .loc[:, ['date_quarter', 'hiato_bcb']]\n  )\n\nhiato_bcb\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date_quarter</th>\n      <th>hiato_bcb</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>NaT</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2003Q4</td>\n      <td>-0.83</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2004Q1</td>\n      <td>-0.40</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2004Q2</td>\n      <td>-0.03</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2004Q3</td>\n      <td>0.35</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>78</th>\n      <td>2023Q1</td>\n      <td>-0.61</td>\n    </tr>\n    <tr>\n      <th>79</th>\n      <td>2023Q2</td>\n      <td>-0.64</td>\n    </tr>\n    <tr>\n      <th>80</th>\n      <td>2023Q3</td>\n      <td>-0.66</td>\n    </tr>\n    <tr>\n      <th>81</th>\n      <td>2023Q4</td>\n      <td>-0.60</td>\n    </tr>\n    <tr>\n      <th>82</th>\n      <td>2024Q1</td>\n      <td>-0.61</td>\n    </tr>\n  </tbody>\n</table>\n<p>83 rows × 2 columns</p>\n</div>\n```\n:::\n:::\n\n\n## 2.2 Resultado estrutural do setor público\n\n::: {#6a80daf0 .cell execution_count=5}\n``` {.python .cell-code}\n# Coleta e tratamento do resultado estrutural do setor público\nsup = (\n     pd.read_excel(\n    \"https://www.gov.br/fazenda/pt-br/assuntos/politica-fiscal/atuacao-spe/resultado-fiscal-estrutural/tabelas-de-dados/series-historicas-rfe-2023-2022-versao-final.xlsx\",\n    sheet_name = \"RFE - Trimestral\",\n    skiprows = 1\n    )\n    .assign(date_quarter = lambda x: pd.PeriodIndex(\n            x['Acum. 4 Trimestres'].str.slice_replace(start = 4, stop = 5, repl = \"-Q\"),  freq = 'Q'\n            ),\n          sup = lambda x: (((x['Resultado Estrutural.2'].astype(float) + 1) ** (1/4)) - 1) * 100\n    )\n    .loc[:, ['date_quarter', 'sup']]\n  )\n```\n:::\n\n\n::: {#30b6ce24 .cell execution_count=6}\n``` {.python .cell-code}\nsup\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date_quarter</th>\n      <th>sup</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2002Q1</td>\n      <td>0.580012</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2002Q2</td>\n      <td>0.511528</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2002Q3</td>\n      <td>0.429860</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2002Q4</td>\n      <td>0.369617</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2003Q1</td>\n      <td>0.551338</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>79</th>\n      <td>2021Q4</td>\n      <td>0.507757</td>\n    </tr>\n    <tr>\n      <th>80</th>\n      <td>2022Q1</td>\n      <td>0.573706</td>\n    </tr>\n    <tr>\n      <th>81</th>\n      <td>2022Q2</td>\n      <td>0.510408</td>\n    </tr>\n    <tr>\n      <th>82</th>\n      <td>2022Q3</td>\n      <td>0.356714</td>\n    </tr>\n    <tr>\n      <th>83</th>\n      <td>2022Q4</td>\n      <td>0.176742</td>\n    </tr>\n  </tbody>\n</table>\n<p>84 rows × 2 columns</p>\n</div>\n```\n:::\n:::\n\n\n## 2.3 Juro Real\n\n::: {#9ac0ec7c .cell execution_count=7}\n``` {.python .cell-code}\n# Cria uma função para a equação de fisher\ndef fisher(juros, inflacao):\n    \"\"\"\n    Calcula a taxa de juros real neutra usando a equação de Fisher.\n\n    Args:\n        juros (float): A taxa de juros nominal em porcentagem (%).\n        inflacao (float): A taxa de inflação em porcentagem (%).\n\n    Returns:\n        float: A taxa de juros real em porcentagem (%).\n\n    Raises:\n        TypeError: Se os argumentos `juros` e `inflacao` não forem do tipo `float`.\n\n    Exemplo:\n        >>> fisher(10, 3)\n        6.796116504854364\n    \"\"\"\n    juros = ((((1 + (juros / 100)) / (1 + inflacao / 100))) -1) * 100\n    return juros\n```\n:::\n\n\n::: {#c76ac39a .cell execution_count=8}\n``` {.python .cell-code}\n# Taxa referencial - swaps - DI pré-360 dias - média do período (IPEADATA/B3)\nswaps = (\n    ip.timeseries('BMF12_SWAPDI36012')\n    .rename(columns = {'VALUE ((% a.a.))' : 'swaps'})[['swaps']]\n  )\n\n# Muda a coluna de data para o índice\nswaps = swaps.set_index(swaps.index.to_period('M'))\n\nswaps\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>swaps</th>\n    </tr>\n    <tr>\n      <th>DATE</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1999-09</th>\n      <td>25.620000</td>\n    </tr>\n    <tr>\n      <th>1999-10</th>\n      <td>25.020000</td>\n    </tr>\n    <tr>\n      <th>1999-11</th>\n      <td>23.790000</td>\n    </tr>\n    <tr>\n      <th>1999-12</th>\n      <td>22.680000</td>\n    </tr>\n    <tr>\n      <th>2000-01</th>\n      <td>21.240000</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>2023-11</th>\n      <td>10.649500</td>\n    </tr>\n    <tr>\n      <th>2023-12</th>\n      <td>10.231053</td>\n    </tr>\n    <tr>\n      <th>2024-01</th>\n      <td>10.046364</td>\n    </tr>\n    <tr>\n      <th>2024-02</th>\n      <td>9.933158</td>\n    </tr>\n    <tr>\n      <th>2024-03</th>\n      <td>9.835500</td>\n    </tr>\n  </tbody>\n</table>\n<p>295 rows × 1 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {#f2399b41 .cell execution_count=9}\n``` {.python .cell-code}\n# Instância a classe de Expectativas\nem = Expectativas()\n\n# Obtém o endpoint da Expectativa de Inflação Acumulada em 12 meses\nexp_ipca_raw = em.get_endpoint('ExpectativasMercadoInflacao12Meses')\n\n# Expectativa média do IPCA - tx. acumulada para os próximos 12 meses (Expectativas)\nipca_expec_12m_raw = (\n    exp_ipca_raw.query()\n    .filter(exp_ipca_raw.Suavizada == 'S',\n            exp_ipca_raw.baseCalculo == 0,\n            exp_ipca_raw.Indicador == 'IPCA')\n    .collect()\n    )\n```\n:::\n\n\n::: {#6b41f5b5 .cell execution_count=10}\n``` {.python .cell-code}\n# Muda a classe da coluna de data para date time e period, renomeia as colunas e seleciona a coluna dos valores\nipca_expec_12m = (\n    ipca_expec_12m_raw\n    # altera o tipo da coluna de data para datetime\n    .set_index(pd.to_datetime(ipca_expec_12m_raw['Data'])\n    # altera o tipo da coluna para period\n    .dt.to_period('D'))\n    .resample('M')\n    .agg({'Mediana':'mean'})\n    .rename(columns = {'Mediana' : 'ipca_exp_12m'})\n    .loc[:, ['ipca_exp_12m']]\n  )\n```\n:::\n\n\n::: {#3a63c6ea .cell execution_count=11}\n``` {.python .cell-code}\nipca_expec_12m\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ipca_exp_12m</th>\n    </tr>\n    <tr>\n      <th>Data</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2001-12</th>\n      <td>5.030000</td>\n    </tr>\n    <tr>\n      <th>2002-01</th>\n      <td>4.733636</td>\n    </tr>\n    <tr>\n      <th>2002-02</th>\n      <td>4.644737</td>\n    </tr>\n    <tr>\n      <th>2002-03</th>\n      <td>4.721500</td>\n    </tr>\n    <tr>\n      <th>2002-04</th>\n      <td>4.790000</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>2023-12</th>\n      <td>3.896605</td>\n    </tr>\n    <tr>\n      <th>2024-01</th>\n      <td>3.862150</td>\n    </tr>\n    <tr>\n      <th>2024-02</th>\n      <td>3.720774</td>\n    </tr>\n    <tr>\n      <th>2024-03</th>\n      <td>3.489515</td>\n    </tr>\n    <tr>\n      <th>2024-04</th>\n      <td>3.502650</td>\n    </tr>\n  </tbody>\n</table>\n<p>269 rows × 1 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {#da6ffd72 .cell execution_count=12}\n``` {.python .cell-code}\n# Junta o df do swap e expectativas do ipca\nex_ante = ipca_expec_12m.join(swaps)\n\n# Calcula o juro real ex-ante\nex_ante = ex_ante.assign(juro_real = lambda x: fisher(x.swaps, x.ipca_exp_12m))\n\n# Trimestraliza o juro real\njuro_real =  (\n     ex_ante\n    .assign(date = lambda x: x.index.to_timestamp(),\n            date_quarter = lambda x: pd.PeriodIndex(x['date'], freq = 'Q'))\n    .reset_index()\n    .loc[:, ['date_quarter', 'juro_real']]\n    .groupby(by = 'date_quarter')\n    .agg(juro_real_ex_ante = ('juro_real', 'mean'))\n    .reset_index()\n    )\n```\n:::\n\n\n## 2.4 Proxy juro neutro\n\n::: {#2515febd .cell execution_count=13}\n``` {.python .cell-code}\n# Cria função para calcular a data de referência a partir da data de observação\ndef reference_date(date: str):\n    \"\"\"\n    Calcula a data de referência adicionando 3 anos a uma data de observação.\n\n    Args:\n        date (str): Uma string que representa uma data no formato 'YYYY-MM-DD'.\n\n    Returns:\n        List[str]: Uma lista de strings com a data de referência no formato 'YYYY'.\n\n    Raises:\n        TypeError: Se o argumento `date` não for uma string.\n\n    Examples:\n        >>> reference_date('2022-01-01')\n        ['2025']\n    \"\"\"\n    years = pd.DatetimeIndex(date).year.values + 3 # Calcula 3 anos a frente\n    years = years.tolist()\n    years = [str(i) for i in years]\n    return years\n```\n:::\n\n\n::: {#8575f884 .cell execution_count=14}\n``` {.python .cell-code}\n# Conecta com a API das Expectativas de Mercado Anuais\nexp_anual = em.get_endpoint('ExpectativasMercadoAnuais')\n\n# Importa as expectativas do IPCA anuais e realiza os filtros\nipca_e_t3_raw = (\n  exp_anual.query()\n  .filter(exp_anual.Indicador == \"IPCA\")\n  .filter(exp_anual.baseCalculo == 0)\n  .select(exp_anual.Data, exp_anual.Mediana, exp_anual.DataReferencia)\n  .collect()\n  )\n```\n:::\n\n\n::: {#132815bf .cell execution_count=15}\n``` {.python .cell-code}\n# Realiza o filtro para a data de referência 3 anos a frente das obs.\nipca_e_t3 = ipca_e_t3_raw[(\n          ipca_e_t3_raw\n          .DataReferencia == reference_date(ipca_e_t3_raw['Data'])\n          )\n            ]\n\n# Renomeia as colunas\nipca_e_t3 = ipca_e_t3.rename(columns = {'Data' : 'date',\n                                  'Mediana' : 'ipca_e'}).drop(['DataReferencia'], axis = 1)\n```\n:::\n\n\n::: {#acc3d8b4 .cell execution_count=16}\n``` {.python .cell-code}\n# Importa as expectativas da Selic anuais e realiza os filtros\nselic_e_t3_raw = (\n   exp_anual.query()\n  .filter(exp_anual.Indicador == \"Selic\")\n  .filter(exp_anual.baseCalculo == 0)\n  .select(exp_anual.Data, exp_anual.Mediana, exp_anual.DataReferencia)\n  .collect()\n  )\n\n# Realiza o filtro para a data de referência 3 anos a frente das obs.\nselic_e_t3 = selic_e_t3_raw[(\n    selic_e_t3_raw\n    .DataReferencia == reference_date(selic_e_t3_raw['Data'])\n    )\n      ]\n\n# Renomeia as colunas\nselic_e_t3 = selic_e_t3.rename(columns = {'Data' : 'date',\n                                         'Mediana' : 'selic_e'}).drop(['DataReferencia'], axis = 1)\n```\n:::\n\n\n::: {#ac33f571 .cell execution_count=17}\n``` {.python .cell-code}\nselic_e_t3\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date</th>\n      <th>selic_e</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>290</th>\n      <td>2000-08-07</td>\n      <td>10.25</td>\n    </tr>\n    <tr>\n      <th>294</th>\n      <td>2000-08-08</td>\n      <td>10.65</td>\n    </tr>\n    <tr>\n      <th>298</th>\n      <td>2000-08-09</td>\n      <td>10.65</td>\n    </tr>\n    <tr>\n      <th>302</th>\n      <td>2000-08-10</td>\n      <td>10.65</td>\n    </tr>\n    <tr>\n      <th>306</th>\n      <td>2000-08-11</td>\n      <td>11.00</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>29430</th>\n      <td>2024-04-08</td>\n      <td>8.50</td>\n    </tr>\n    <tr>\n      <th>29435</th>\n      <td>2024-04-09</td>\n      <td>8.50</td>\n    </tr>\n    <tr>\n      <th>29440</th>\n      <td>2024-04-10</td>\n      <td>8.50</td>\n    </tr>\n    <tr>\n      <th>29445</th>\n      <td>2024-04-11</td>\n      <td>8.50</td>\n    </tr>\n    <tr>\n      <th>29450</th>\n      <td>2024-04-12</td>\n      <td>8.50</td>\n    </tr>\n  </tbody>\n</table>\n<p>5729 rows × 2 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {#ba092552 .cell execution_count=18}\n``` {.python .cell-code}\n# Junta os dados em um data frame\nproxy_neutro_m = (\n                pd.merge(left = ipca_e_t3,\n                        right = selic_e_t3,\n                        how = 'inner',\n                        on = 'date')\n                .assign(neutro = lambda x : fisher(x.selic_e, x.ipca_e))\n                )\n```\n:::\n\n\n::: {#b6b75c65 .cell execution_count=19}\n``` {.python .cell-code}\n# Trimestraliza o juro neutro\nproxy_neutro = (\n    proxy_neutro_m\n    .assign(date_quarter = lambda x: pd.PeriodIndex(x['date'], freq = 'Q'))\n    .loc[:, ['date_quarter', 'neutro']]\n    .groupby(by = 'date_quarter')\n    .agg(neutro = ('neutro', 'mean'))\n    .reset_index()\n)\n\nproxy_neutro\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date_quarter</th>\n      <th>neutro</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2000Q3</td>\n      <td>7.900660</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2000Q4</td>\n      <td>8.242186</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2001Q4</td>\n      <td>9.302590</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2002Q1</td>\n      <td>8.374903</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2002Q2</td>\n      <td>8.681850</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>88</th>\n      <td>2023Q2</td>\n      <td>4.694520</td>\n    </tr>\n    <tr>\n      <th>89</th>\n      <td>2023Q3</td>\n      <td>4.889417</td>\n    </tr>\n    <tr>\n      <th>90</th>\n      <td>2023Q4</td>\n      <td>4.830918</td>\n    </tr>\n    <tr>\n      <th>91</th>\n      <td>2024Q1</td>\n      <td>4.830918</td>\n    </tr>\n    <tr>\n      <th>92</th>\n      <td>2024Q2</td>\n      <td>4.830918</td>\n    </tr>\n  </tbody>\n</table>\n<p>93 rows × 2 columns</p>\n</div>\n```\n:::\n:::\n\n\n# Resultados\n\n::: {#8ab8346b .cell execution_count=20}\n``` {.python .cell-code}\n# lista de dataframes\ndfs = [hiato, hiato_bcb, sup, juro_real, proxy_neutro]\n\n# reduz os dataframes pela chave 'date_quarter' com left join\ndados_reg = reduce(lambda left, right: pd.merge(left, right, on = 'date_quarter', how = 'left'), dfs).dropna()\n```\n:::\n\n\n::: {#b4d4461a .cell execution_count=21}\n``` {.python .cell-code}\ndados_reg\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date_quarter</th>\n      <th>hiato_ifi</th>\n      <th>hiato_bcb</th>\n      <th>sup</th>\n      <th>juro_real_ex_ante</th>\n      <th>neutro</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>31</th>\n      <td>2003Q4</td>\n      <td>-2.11</td>\n      <td>-0.83</td>\n      <td>0.800498</td>\n      <td>10.143272</td>\n      <td>7.682231</td>\n    </tr>\n    <tr>\n      <th>32</th>\n      <td>2004Q1</td>\n      <td>-1.80</td>\n      <td>-0.40</td>\n      <td>0.841014</td>\n      <td>9.234492</td>\n      <td>6.828106</td>\n    </tr>\n    <tr>\n      <th>33</th>\n      <td>2004Q2</td>\n      <td>-0.37</td>\n      <td>-0.03</td>\n      <td>0.856842</td>\n      <td>10.660948</td>\n      <td>6.911622</td>\n    </tr>\n    <tr>\n      <th>34</th>\n      <td>2004Q3</td>\n      <td>0.14</td>\n      <td>0.35</td>\n      <td>0.840079</td>\n      <td>10.669399</td>\n      <td>7.722397</td>\n    </tr>\n    <tr>\n      <th>35</th>\n      <td>2004Q4</td>\n      <td>0.20</td>\n      <td>0.63</td>\n      <td>0.862868</td>\n      <td>10.991071</td>\n      <td>8.126497</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>103</th>\n      <td>2021Q4</td>\n      <td>-1.90</td>\n      <td>-0.94</td>\n      <td>0.507757</td>\n      <td>5.739677</td>\n      <td>3.695658</td>\n    </tr>\n    <tr>\n      <th>104</th>\n      <td>2022Q1</td>\n      <td>-1.44</td>\n      <td>-0.66</td>\n      <td>0.573706</td>\n      <td>6.786059</td>\n      <td>3.883495</td>\n    </tr>\n    <tr>\n      <th>105</th>\n      <td>2022Q2</td>\n      <td>-0.52</td>\n      <td>-0.58</td>\n      <td>0.510408</td>\n      <td>7.225903</td>\n      <td>4.151653</td>\n    </tr>\n    <tr>\n      <th>106</th>\n      <td>2022Q3</td>\n      <td>0.07</td>\n      <td>-0.57</td>\n      <td>0.356714</td>\n      <td>7.783747</td>\n      <td>4.389400</td>\n    </tr>\n    <tr>\n      <th>107</th>\n      <td>2022Q4</td>\n      <td>0.10</td>\n      <td>-0.58</td>\n      <td>0.176742</td>\n      <td>8.000677</td>\n      <td>4.736425</td>\n    </tr>\n  </tbody>\n</table>\n<p>77 rows × 6 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {#7df0b857 .cell execution_count=22}\n``` {.python .cell-code}\n# Calcula as defasagens\ndados_reg['hiato_lag1'] = dados_reg['hiato_bcb'].shift(1)\ndados_reg['hiato_lag2'] = dados_reg['hiato_bcb'].shift(2)\ndados_reg['sup_diff'] = dados_reg['sup'].diff()\ndados_reg['sup_diff_lag1'] = dados_reg['sup_diff'].shift(1)\ndados_reg['sup_diff_lag2'] = dados_reg['sup_diff'].shift(2)\ndados_reg['sup_diff_lag3'] = dados_reg['sup_diff'].shift(3)\ndados_reg['juro_real_ex_ante_lag1'] = dados_reg['juro_real_ex_ante'].shift(1)\ndados_reg['juro_real_ex_ante_lag2'] = dados_reg['juro_real_ex_ante'].shift(2)\ndados_reg['neutro_lag1'] = dados_reg['neutro'].shift(1)\ndados_reg['neutro_lag2'] = dados_reg['neutro'].shift(2)\ndados_reg['hiato_juros'] = dados_reg.juro_real_ex_ante - dados_reg.neutro\ndados_reg['hiato_juros_lag1'] = dados_reg['hiato_juros'].shift(1)\ndados_reg['hiato_juros_lag2'] = dados_reg['hiato_juros'].shift(2)\ndados_reg['hiato_lag3'] = dados_reg['hiato_bcb'].shift(3)\ndados_reg['hiato_lag4'] = dados_reg['hiato_bcb'].shift(4)\ndados_reg['sup_lag1'] = dados_reg['sup'].shift(1)\n\n# Criar variáveis dummy trimestrais usando pd.get_dummies\nt_dummies = pd.get_dummies(dados_reg['date_quarter'].dt.quarter, prefix = 'trimestre', dtype = int)\ndados_reg['d_subprime'] = dados_reg['date_quarter'].isin(pd.PeriodIndex(['2008Q4', \"2009Q1\"], freq = 'Q'))\ndados_reg['d_covid'] = dados_reg['date_quarter'].isin(pd.PeriodIndex(['2020Q2'], freq = 'Q'))\n\n# Concatenar as variáveis dummy com o DataFrame original\ndados_reg = pd.concat([dados_reg, t_dummies], axis=1).dropna()\n```\n:::\n\n\n::: {#41f3548b .cell execution_count=23}\n``` {.python .cell-code}\n# Retira os dados faltantes\ndados_reg.dropna(inplace = True)\n```\n:::\n\n\n::: {#2e9b89ff .cell execution_count=24}\n``` {.python .cell-code}\n# Estimando o modelo 2SLS usando a função IV2SLS.from_formula\nmodel = IV2SLS.from_formula('hiato_bcb ~ 1 + d_subprime + d_covid + [hiato_lag1 + hiato_juros_lag1 + sup_diff_lag1 ~ hiato_lag1 + juro_real_ex_ante_lag1 + neutro_lag2 + sup_diff_lag1]',\n                            data = dados_reg).fit(cov_type='kernel')\n\n# Imprimindo o sumário do modelo\nprint(model.summary)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                          IV-2SLS Estimation Summary                          \n==============================================================================\nDep. Variable:              hiato_bcb   R-squared:                      0.9563\nEstimator:                    IV-2SLS   Adj. R-squared:                 0.9530\nNo. Observations:                  73   F-statistic:                    7598.6\nDate:                Thu, Apr 18 2024   P-value (F-stat)                0.0000\nTime:                        21:52:54   Distribution:                  chi2(5)\nCov. Estimator:                kernel                                         \n                                                                              \n                                Parameter Estimates                                 \n====================================================================================\n                  Parameter  Std. Err.     T-stat    P-value    Lower CI    Upper CI\n------------------------------------------------------------------------------------\nIntercept            0.1003     0.0773     1.2982     0.1942     -0.0511      0.2517\nd_covid             -2.4318     0.1616    -15.051     0.0000     -2.7485     -2.1151\nd_subprime          -1.4350     0.1475    -9.7254     0.0000     -1.7242     -1.1458\nhiato_juros_lag1    -0.0770     0.0346    -2.2257     0.0260     -0.1448     -0.0092\nhiato_lag1           0.9648     0.0306     31.573     0.0000      0.9049      1.0247\nsup_diff_lag1       -0.1819     0.4159    -0.4373     0.6619     -0.9971      0.6333\n====================================================================================\n\nEndogenous: hiato_juros_lag1, hiato_lag1, sup_diff_lag1\nInstruments: hiato_lag1, juro_real_ex_ante_lag1, neutro_lag2, sup_diff_lag1\nKernel Covariance (HAC)\nDebiased: False\nKernel: bartlett\nAutomatic Bandwidth: True\nBandwidth: 3\n```\n:::\n:::\n\n\n::: {#a43b58c5 .cell execution_count=25}\n``` {.python .cell-code}\n# Cria df com o resultado\nresultado = pd.DataFrame({'Ajuste' : model.fitted_values.fitted_values,\n                          'Resíduo' : model.resids,\n                          'Hiato' : dados_reg.hiato_bcb.values,\n                          'Data' : dados_reg.date_quarter.dt.to_timestamp(),\n                          \"Hiato Defasado\": model.params.hiato_lag1 * dados_reg.hiato_lag1,\n                          \"Hiato do Juros Defasado\": model.params.hiato_juros_lag1 * dados_reg.hiato_juros_lag1,\n                          \"Diff. Superávit\": model.params.sup_diff_lag1 * dados_reg.sup_diff_lag1})\n```\n:::\n\n\n::: {#2064b5ae .cell execution_count=26}\n``` {.python .cell-code}\n# Altera para long\nresultado_fit_long = resultado[['Data', 'Ajuste', 'Hiato']].melt(id_vars = ['Data'])\n\n# Criação do gráfico\n(\n  ggplot(resultado_fit_long, aes(x = 'Data', y = 'value', color = 'variable')) +\n  geom_line(size =  1) +\n  theme_minimal() +\n  scale_color_manual(values = ['#b22200', '#282f6b']) +\n  scale_x_datetime(date_breaks = '2 years', date_labels = \"%Y\") +\n  labs(\n    title = 'Ajuste da Curva IS estimada x Hiato do Produto (BCB)',\n    x = '',\n    y = '',\n    color = \"\",\n    caption = 'Elaborado por analisemacro.com.br | Fonte: BCB')+\n  theme(legend_position = 'bottom',\n        figure_size = (10, 7))\n  )\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-27-output-1.png){}\n:::\n:::\n\n\n::: {#1a6f408e .cell execution_count=27}\n``` {.python .cell-code}\n# Cria uma figura com 1 linha e 3 colunas para os três gráficos\nfig, axes = plt.subplots(nrows=1, ncols=3, figsize=(15, 4))\n\n# Gráfico de Linha do Resíduo\naxes[0].plot(resultado.Resíduo)\naxes[0].set_title('Gráfico de Linha do Resíduo')\naxes[0].set_xlabel('Tempo')\naxes[0].set_ylabel('Resíduo')\n\n# Gráfico de Autocorrelação (ACF)\nsm.graphics.tsa.plot_acf(resultado.Resíduo, lags=40, ax=axes[1], zero = False)\naxes[1].set_title('Gráfico de Autocorrelação (ACF) dos Resíduos')\naxes[1].set_xlabel('Lags')\naxes[1].set_ylabel('Autocorrelação')\n\n# Gráfico de Histograma\naxes[2].hist(resultado.Resíduo, bins=20, edgecolor='k')\naxes[2].set_title('Histograma dos Resíduos')\naxes[2].set_xlabel('Resíduo')\naxes[2].set_ylabel('Frequência')\n\nplt.tight_layout()  # Para garantir que os gráficos não se sobreponham\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-28-output-1.png){width=4500 height=1200}\n:::\n:::\n\n\n::: {#75ed76f5 .cell execution_count=28}\n``` {.python .cell-code}\nresultado_fit_plot_long = resultado[['Data', 'Hiato Defasado', 'Hiato do Juros Defasado', 'Diff. Superávit', 'Resíduo']].melt(id_vars = ['Data'])\n\n(\n ggplot(resultado_fit_plot_long, aes(x = 'Data', y = 'value', fill = 'variable'))+\n geom_col() +\n geom_hline(yintercept = 0, colour = 'black') +\n theme_minimal() +\n scale_fill_manual(values = ['black', '#224f20', '#b22200', '#eace3f']) +\n scale_x_datetime(date_breaks = '2 years', date_labels = \"%Y\") +\n labs(\n    title = 'Contribuição para o Hiato do Produto',\n    x = '',\n    y = 'p.p.',\n    fill = \"\",\n    caption = 'Elaborado por analisemacro.com.br | Fonte: BCB')+\n  theme(legend_position = 'top',\n        figure_size = (10, 7))\n)\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-29-output-1.png){}\n:::\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}